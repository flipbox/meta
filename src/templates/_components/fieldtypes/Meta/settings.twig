{% import '_includes/forms' as forms %}

{% set fieldInput %}
    <div class="mc-sidebar fields">
        <div class="col-inner-container">
            <div class="heading">
                <h5>{{ "Fields"|t('app') }}</h5>
            </div>
            <div class="items">
                <div class="fields">
                    {% for field in field.getFields() %}
                        <div class="metaconfigitem mci-field{% if field.hasErrors() %} error{% endif %}"
                             data-id="{{ field.id }}">
                            <div class="name{% if field.required %} required{% endif %}">
                                {%- if field.name and field.name != '__blank__' %}{{ field.name }}{% else %}<em
                                        class="light">{{ '(blank)'|t('app') }}</em>{% endif -%}
                                &nbsp;
                            </div>
                            <div class="handle code">{{ field.handle }}&nbsp;</div>
                            <div class="actions">
                                <a class="move icon" title="{{ 'Reorder'|t('app') }}" role="button"></a>
                            </div>
                        </div>
                    {% endfor %}
                </div>
                <div class="btn add icon">{{ "New field"|t('app') }}</div>
            </div>
        </div>
    </div>
    <div class="field-settings">
        <div class="col-inner-container">
            <div class="heading">
                <h5>{{ "Field Settings"|t('app') }}</h5>
            </div>
            <div class="items">
                {% for field in field.getFields() %}
                    {% set fieldId = field.id %}
                    <div data-id="{{ fieldId }}" class="hidden">
                        {% namespace 'fields['~fieldId~']' %}
                        {{ forms.textField({
                            label: "Name"|t('app'),
                            id: 'name',
                            name: 'name',
                            value: (field.name != '__blank__' ? field.name),
                            errors: field.getErrors('name'),
                            autofocus: true
                        }) }}

                        {{ forms.textField({
                            label: "Handle"|t('app'),
                            id: 'handle',
                            class: 'code',
                            name: 'handle',
                            maxlength: 64,
                            value: field.handle,
                            errors: field.getErrors('handle'),
                            required: true,
                        }) }}

                        {{ forms.textareaField({
                            label: "Instructions"|t('app'),
                            id: 'instructions',
                            class: 'nicetext',
                            name: 'instructions',
                            value: field.instructions,
                            errors: field.getErrors('instructions'),
                        }) }}

                        {{ forms.checkboxField({
                            label: "This field is required"|t('app'),
                            id: 'required',
                            name: 'required',
                            checked: field.required
                        }) }}

                        {{ forms.selectField({
                            label: "Field Type"|t('app'),
                            warning: (not field.getIsNew() and not field.hasErrors('type') ? "Changing this may result in data loss."|t('app')),
                            id: 'type',
                            name: 'type',
                            options: fieldTypes,
                            value: className(field),
                            errors: field.getErrors('type') ?? null
                        }) }}

                        {% if craft.app.getIsMultiSite() %}
                            <div id="translation-settings"
                                 {% if not field.hasContentColumn() %}class="hidden"{% endif %}>
                                {{ forms.selectField({
                                    label: "Translation Method"|t('app'),
                                    id: 'translation-method',
                                    name: 'translationMethod',
                                    options: [
                                    { value: 'none', label: "Not translatable"|t('app') },
                                    { value: 'language', label: "Translate for each language"|t('app') },
                                    { value: 'site', label: "Translate for each site"|t('app') },
                                    { value: 'custom', label: "Customâ€¦"|t('app') }
                                    ],
                                    value: field.translationMethod,
                                    toggle: true,
                                    targetPrefix: 'translation-method-'
                                }) }}

                                <div id="translation-method-custom"
                                     {% if field.translationMethod != 'custom' %}class="hidden"{% endif %}>
                                    {{ forms.textField({
                                        label: "Translation Key Format"|t('app'),
                                        id: 'translation-key-format',
                                        name: 'translationKeyFormat',
                                        value: field.translationKeyFormat,
                                        errors: field.getErrors('translationKeyFormat')
                                    }) }}
                                </div>
                            </div>
                        {% endif %}
                        {% endnamespace %}

                        <hr>

                        <div class="fieldtype-settings">
                            <div>
                                {% namespace 'fields['~fieldId~'][settings]' %}
                                {{ field.getSettingsHtml()|raw }}
                                {% endnamespace %}
                            </div>
                        </div>

                        <hr>

                        <a class="error delete">{{ "Delete"|t('app') }}</a>
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>
{% endset %}

<div id="meta-configuration" class="meta-configuration">
    {{ forms.field({
        label: "Configuration"|t('app'),
        instructions: "Define the types of fields that can be created within this Meta field."|t('meta'),
        name: 'config'
    }, fieldInput) }}
</div>

{% if craft.app.getIsMultiSite() %}
    {{ forms.checkboxField({
        label: "Manage meta on a per-site basis"|t('app'),
        id: 'localize',
        name: 'localize',
        checked: field.localize
    }) }}
{% endif %}

{{ forms.textField({
    label: "Max"|t('app'),
    instructions: "The maximum number of meta rows the field is allowed to have."|t('app'),
    id: 'max',
    name: 'max',
    value: field.max,
    size: 3,
    errors: field.getErrors('max')
}) }}

{{ forms.textField({
    label: "Template"|t('app'),
    instructions: "The template path used to render the fields in the CP."|t('app'),
    id: 'template',
    name: 'template',
    value: field.template,
    errors: field.getErrors('template')
}) }}